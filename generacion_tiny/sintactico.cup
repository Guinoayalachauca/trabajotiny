package Tiny;

import java_cup.runtime.*;
import ast.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
//import otros.*;

parser code {:

/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
public static void main(String args[]) throws Exception {
        SymbolFactory sf = new DefaultSymbolFactory();
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String fileIn, fileOut;

        parser parser_obj = null;
        if (args.length<1){
            System.out.println("*** Advertencia: Archivo fuente no especificado.");
            System.out.print("Por favor, especifique un archivo a compilar: ");
            fileIn = br.readLine();
            fileOut = fileIn.substring(0, fileIn.lastIndexOf(".")) + ".pcod";
        }else{
            fileIn = args[0];
            if(args.length<2){
              fileOut = fileIn.substring(0, fileIn.lastIndexOf(".")) + ".pcod";
            }else{
              fileOut = args[1];
            }
        }
        parser_obj=new parser(new Scanner(new java.io.FileInputStream(fileIn),sf),sf);
        parser_obj.parse();
        NodoBase root=parser_obj.action_obj.getASTroot();
        System.out.println();
        System.out.println("IMPRESION DEL AST GENERADO");
        System.out.println();
        //ast.Util.imprimirAST(root);
        TablaSimbolos ts = new TablaSimbolos();
        try{
          ts.cargarTabla(root, 0);
        }catch(IdNotFoundException e){
          System.err.println("\n\nSe ha encontrado un error en la compilacion:\n\t" + e.getMessage());
          System.exit(0);
        }
        ts.ImprimirTabla();
        Tiny.Generador.setTablaSimbolos(ts);
        Tiny.Generador.generarCodigoObjeto(root, fileIn, fileOut);
    }
:}

action code {:
    private boolean debug=true;
    private NodoBase ast=null;
    private int lineanum=0;
    private int contBloque = 0;

    //Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
    public NodoBase getASTroot(){
        return ast;
    }
:}

/* Simbolos Terminales */
terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal String ID;
terminal String NUM;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal SEMI;
terminal FUNCTION;
terminal RETURN;
terminal COMMA;
terminal VECTOR;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase s_stmt_seq;
non terminal NodoBase s_stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal NodoBase iden;
non terminal NodoBase function_stmt;
non terminal NodoBase arg_list;
non terminal NodoBase param_list;
non terminal NodoBase decl_vect;

/* Precedencia de operadores NO USAR FALLA
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
*/

/* REGLAS GRAMATICALES */
program ::= stmt_seq:s  {:  if(debug) System.out.println("\t regla 1");
                            ast = s;
                        :}
;

stmt_seq ::= stmt_seq:ini SEMI stmt:sent    {:  if(debug) System.out.println("\t regla 2a");
                                                NodoBase hijoActual = ini;
                                                if(hijoActual !=null){
                                                    while(hijoActual.TieneHermano()){
                                                        hijoActual = hijoActual.getHermanoDerecha();
                                                    }
                                                    hijoActual.setHermanoDerecha(sent);
                                                    RESULT=ini;
                                                }else{
                                                    RESULT=sent;
                                                }
                                            :}
            | stmt:sent {:  if(debug) System.out.println("\t regla 2b");
                            RESULT=sent;
                        :}
;

s_stmt_seq ::= s_stmt_seq:ini SEMI s_stmt:sent  {:  if(debug) System.out.println("\t regla 3a");
                                                    NodoBase hijoActual = ini;
                                                    if(hijoActual !=null){
                                                        while(hijoActual.TieneHermano()){
                                                            hijoActual = hijoActual.getHermanoDerecha();
                                                        }
                                                        hijoActual.setHermanoDerecha(sent);
                                                        RESULT=ini;
                                                    }else{
                                                        RESULT=sent;
                                                    }
                                                :}
            | s_stmt:sent   {:  if(debug) System.out.println("\t regla 3b");
                                RESULT=sent;
                            :}
;

stmt ::= if_stmt:sif    {:  if(debug) System.out.println("\t regla 4a");
                            RESULT=sif;
                        :}
        | repeat_stmt:srep  {:  if(debug) System.out.println("\t regla 4b");
                                RESULT=srep;
                            :}
        | assign_stmt:sasi  {:  if(debug) System.out.println("\t regla 4c");
                                RESULT=sasi;
                            :}
        | read_stmt:slec    {:  if(debug) System.out.println("\t regla 4d");
                                RESULT=slec;
                            :}
        | write_stmt:sesc   {:  if(debug) System.out.println("\t regla 4e");
                                RESULT=sesc;
                            :}
        | function_stmt:fnt {:  if(debug) System.out.println("\t regla 4f");
                                RESULT=fnt;
                            :}
        | decl_vect:deve{:  if(debug) System.out.println("\t regla 4h");
                            RESULT=deve;
                        :}
        | error {:  if(debug) System.out.println("\t regla 4g");
                    System.out.println("Ocurrio error en cup # 0004");
                    RESULT=null;
                :}
;

s_stmt ::= if_stmt:sif  {:  if(debug) System.out.println("\t regla 5a");
                            RESULT=sif;
                        :}
        | repeat_stmt:srep  {:  if(debug) System.out.println("\t regla 5b");
                                RESULT=srep;
                            :}
        | assign_stmt:sasi  {:  if(debug) System.out.println("\t regla 5c");
                                RESULT=sasi;
                            :}
        | read_stmt:slec    {:  if(debug) System.out.println("\t regla 5d");
                                RESULT=slec;
                            :}
        | write_stmt:sesc   {:  if(debug) System.out.println("\t regla 5e");
                                RESULT=sesc;
                            :}
        | decl_vect:deve{:  if(debug) System.out.println("\t regla 4h");
                            RESULT=deve;
                        :}
        | error {:  if(debug) System.out.println("\t regla 5f");
                    System.out.println("Ocurrio error en cup # 0004");
                    RESULT=null;
                :}
;


if_stmt ::= IF exp:ex THEN s_stmt_seq:pthen END {:  if(debug) System.out.println("\t regla 6a");
                                                    RESULT = new NodoIf(ex,pthen);
                                                :}
        | IF exp:ex THEN s_stmt_seq:pthen ELSE s_stmt_seq:pelse END {:  if(debug) System.out.println("\t regla 6b");
                                                                        RESULT = new NodoIf(ex,pthen,pelse);
                                                                    :}
;

repeat_stmt ::= REPEAT s_stmt_seq:cuerpo UNTIL exp:prueba   {:  if(debug) System.out.println("\t regla 7");
                                                                RESULT = new NodoRepeat(cuerpo,prueba);
                                                            :}
;

assign_stmt ::= iden:id ASSIGN exp:r    {:  if(debug) System.out.println("\t regla 8");
                                            if(id!=null)
                                                RESULT = new NodoAsignacion(id,r);
                                            else{
                                                RESULT = null;
                                                System.out.println("Ocurrio error en cup # 0001");
                                            }
                                        :}
;

read_stmt ::= READ iden:id  {:  if(debug) System.out.println("\t regla 9");
                                System.out.println("Leyendo Variable");
                                if(id!=null)
                                    RESULT = new NodoLeer(id);
                                else{
                                    RESULT = null;
                                    System.out.println("Ocurrio error en cup # 0002");
                                }
                            :}
;

write_stmt ::= WRITE exp:ex {:  if(debug) System.out.println("\t regla 10");
                                RESULT= new NodoEscribir(ex);
                            :}
;

exp ::= simple_exp:exI LT simple_exp:exD    {:  if(debug) System.out.println("\t regla 11a");
                                                RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
                                            :}
        | simple_exp:exI EQ simple_exp:exD  {:  if(debug) System.out.println("\t regla 11b");
                                                RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
                                            :}
        | simple_exp:ex {:  if(debug) System.out.println("\t regla 11c");
                            RESULT = ex;
                        :}
;

simple_exp ::= simple_exp:exI PLUS term:exD {:  if(debug) System.out.println("\t regla 12a");
                                                RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
                                            :}
            | simple_exp:exI MINUS term:exD {:  if(debug) System.out.println("\t regla 12b");
                                                RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
                                            :}
            | term:ex   {:  if(debug) System.out.println("\t regla 12c");
                            RESULT=ex;
                        :}
;

term ::= term:exI TIMES factor:exD  {:  if(debug) System.out.println("\t regla 13a");
                                        RESULT = new NodoOperacion(exI,tipoOp.por,exD);
                                    :}
        | term:exI OVER factor:exD  {:  if(debug) System.out.println("\t regla 13b");
                                        RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
                                    :}
        | factor:ex {:  if(debug) System.out.println("\t regla 13c");
                        RESULT=ex;
                    :}
;

factor ::= LPAREN exp:ex RPAREN {:  if(debug) System.out.println("\t regla 14a");
                                    RESULT = ex;
                                :}
        | NUM:valor {:  if(debug) System.out.println("\t regla 14b");
                        System.out.println("Devolví un nodo número entero");
                        RESULT= new NodoValor(Integer.parseInt(valor));
                    :}
        | iden:id   {: if(debug) System.out.println("\t regla 14c");
                            RESULT = id;
                        :}
        | error {: if(debug) System.out.println("\t regla 14d");
                    System.out.println("Ocurrio error en cup # 0003");
                    RESULT=null;
                :}
;

iden ::= ID:id LBRACK simple_exp:ex RBRACK  {:  if(debug) System.out.println("\t regla 15a");
                                                if (id != null && ex != null)
                                                    RESULT = new NodoVector(new NodoIdentificador(id.toString()),ex);
                                                else{
                                                    RESULT = null;
                                                    System.out.println("Ocurrio error en cup # 0005");
                                                }
                                            :}
        | ID:id LPAREN arg_list:ar RPAREN   {:  if(debug) System.out.println("\t regla 15b anidada");
                                                RESULT = new NodoFuncion(new NodoIdentificador(id.toString()),ar);
                                            :}
        | ID:id LPAREN RPAREN   {:  if(debug) System.out.println("\t regla 15c anidada");
                                    RESULT = new NodoFuncion(new NodoIdentificador(id.toString()));
                                :}
        | ID:variable {:    if(debug) System.out.println("\t regla 15d");
                            if(variable!=null){
                                System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
                                RESULT= new NodoIdentificador(variable.toString());
                            }else{
                                RESULT = null;
                                System.out.println("Ocurrio error en cup # 0005");
                            }
                        :}
;

function_stmt ::= FUNCTION ID:id LPAREN param_list:ar RPAREN s_stmt_seq:st RETURN iden:variable END     {:  if(debug) System.out.println("\t regla 16a");
                                                                                                            RESULT = new NodoFuncion(new NodoIdentificador(id.toString()),ar,st,variable,++contBloque);
                                                                                                        :}
                | FUNCTION ID:id LPAREN RPAREN s_stmt_seq:st RETURN iden:variable END   {:  if(debug) System.out.println("\t regla 16b");
                                                                                            RESULT = new NodoFuncion(new NodoIdentificador(id.toString()),null,st,variable,++contBloque);
                                                                                        :}
;

param_list ::= param_list:ar COMMA ID:variable    {: if(debug) System.out.println("\t regla 17a");
                                                        NodoBase hijoActual = ar;
                                                        if(hijoActual !=null){
                                                            while(hijoActual.TieneHermano()){
                                                                hijoActual = hijoActual.getHermanoDerecha();
                                                            }
                                                            hijoActual.setHermanoDerecha(new NodoArgumento(new NodoIdentificador(variable.toString())));
                                                            RESULT=ar;
                                                        }else{
                                                            RESULT=new NodoArgumento(new NodoIdentificador(variable.toString()));
                                                        }
                                                    :}
            | ID:variable {: if(debug) System.out.println("\t regla 17b");
                                if(variable!=null){
                                    System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
                                    RESULT= new NodoArgumento(new NodoIdentificador(variable.toString()));
                                }else{
                                    RESULT = null;
                                    System.out.println("Ocurrio error en cup # 0005");
                                }
                            :}
;

arg_list ::= arg_list:ar COMMA simple_exp:variable  {: if(debug) System.out.println("\t regla 18a");
                                                        NodoBase hijoActual = ar;
                                                        if(hijoActual !=null){
                                                            while(hijoActual.TieneHermano()){
                                                                hijoActual = hijoActual.getHermanoDerecha();
                                                            }
                                                            hijoActual.setHermanoDerecha(variable);
                                                            RESULT=ar;
                                                        }else{
                                                            RESULT=variable;
                                                        }
                                                    :}
            | simple_exp:variable   {: if(debug) System.out.println("\t regla 18b");
                                        RESULT=variable;
                                    :}
;
decl_vect ::= VECTOR ID:id NUM:num  {:  if(debug) System.out.println("\t regla 15a");
                                        if (id != null && num != null){
                                         NodoVector vector = new NodoVector(new NodoIdentificador(id.toString()),new NodoValor(Integer.parseInt(num)));
                                        vector.setDeclaracion(true);
                                        System.out.println("Devuelve un nodo vector");
                                        RESULT = vector;
                                        }else{
                                            RESULT = null;
                                            System.out.println("Ocurrio error en cup # 00017");
                                        }
                                    :}
;