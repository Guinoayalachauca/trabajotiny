
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 12 14:10:44 VET 2018
//----------------------------------------------------

package Tiny;

import java_cup.runtime.*;
import ast.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 12 14:10:44 VET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\005\005\000\002\005\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\007\007\000" +
    "\002\007\011\000\002\010\006\000\002\011\005\000\002" +
    "\012\004\000\002\013\004\000\002\014\005\000\002\014" +
    "\005\000\002\014\003\000\002\015\005\000\002\015\005" +
    "\000\002\015\003\000\002\016\005\000\002\016\005\000" +
    "\002\016\003\000\002\017\005\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\020\006\000\002\020" +
    "\006\000\002\020\005\000\002\020\003\000\002\021\013" +
    "\000\002\021\012\000\002\023\005\000\002\023\003\000" +
    "\002\022\005\000\002\022\003\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\022\003\020\004\010\010\023\012\005\013" +
    "\013\014\014\032\007\035\015\001\002\000\006\002\ufffa" +
    "\031\ufffa\001\002\000\004\014\014\001\002\000\006\002" +
    "\ufff8\031\ufff8\001\002\000\004\014\122\001\002\000\012" +
    "\003\035\014\014\015\030\025\037\001\002\000\006\002" +
    "\ufff6\031\ufff6\001\002\000\004\002\112\001\002\000\012" +
    "\003\035\014\014\015\030\025\037\001\002\000\050\002" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6\016\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\100\026" +
    "\uffd6\027\077\030\uffd6\031\uffd6\033\uffd6\034\uffd6\001\002" +
    "\000\004\014\075\001\002\000\006\002\001\031\073\001" +
    "\002\000\006\002\ufff5\031\ufff5\001\002\000\006\002\ufff4" +
    "\031\ufff4\001\002\000\006\002\ufffb\031\ufffb\001\002\000" +
    "\006\002\ufff7\031\ufff7\001\002\000\020\003\066\004\010" +
    "\010\023\012\005\013\013\014\014\035\015\001\002\000" +
    "\006\002\ufff9\031\ufff9\001\002\000\006\002\ufffe\031\ufffe" +
    "\001\002\000\004\016\027\001\002\000\012\003\035\014" +
    "\014\015\030\025\037\001\002\000\042\002\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\011\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\026\uffdc\030\uffdc\031\uffdc\033\uffdc" +
    "\034\uffdc\001\002\000\042\002\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\011\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\050" +
    "\024\047\026\uffe1\030\uffe1\031\uffe1\033\uffe1\034\uffe1\001" +
    "\002\000\016\002\uffe9\006\uffe9\007\uffe9\011\uffe9\031\uffe9" +
    "\033\uffe9\001\002\000\042\002\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\011\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\026\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb\001" +
    "\002\000\042\002\uffde\005\uffde\006\uffde\007\uffde\011\uffde" +
    "\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\026" +
    "\uffde\030\uffde\031\uffde\033\uffde\034\uffde\001\002\000\042" +
    "\002\uffda\005\uffda\006\uffda\007\uffda\011\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\026\uffda\030\uffda" +
    "\031\uffda\033\uffda\034\uffda\001\002\000\032\002\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\011\uffe4\017\042\020\043\021\044" +
    "\022\045\026\uffe4\031\uffe4\033\uffe4\001\002\000\012\003" +
    "\035\014\014\015\030\025\037\001\002\000\004\026\041" +
    "\001\002\000\042\002\uffdd\005\uffdd\006\uffdd\007\uffdd\011" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\026\uffdd\030\uffdd\031\uffdd\033\uffdd\034\uffdd\001\002\000" +
    "\012\003\035\014\014\015\030\025\037\001\002\000\012" +
    "\003\035\014\014\015\030\025\037\001\002\000\012\003" +
    "\035\014\014\015\030\025\037\001\002\000\012\003\035" +
    "\014\014\015\030\025\037\001\002\000\042\002\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\011\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\050\024\047\026\uffe2\030\uffe2\031\uffe2\033" +
    "\uffe2\034\uffe2\001\002\000\012\003\035\014\014\015\030" +
    "\025\037\001\002\000\012\003\035\014\014\015\030\025" +
    "\037\001\002\000\042\002\uffe0\005\uffe0\006\uffe0\007\uffe0" +
    "\011\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\026\uffe0\030\uffe0\031\uffe0\033\uffe0\034\uffe0\001\002" +
    "\000\042\002\uffdf\005\uffdf\006\uffdf\007\uffdf\011\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\026\uffdf" +
    "\030\uffdf\031\uffdf\033\uffdf\034\uffdf\001\002\000\042\002" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\011\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\023\050\024\047\026\uffe3\030\uffe3\031" +
    "\uffe3\033\uffe3\034\uffe3\001\002\000\026\002\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\011\uffe6\021\044\022\045\026\uffe6\031" +
    "\uffe6\033\uffe6\001\002\000\026\002\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\011\uffe5\021\044\022\045\026\uffe5\031\uffe5\033" +
    "\uffe5\001\002\000\014\006\ufff2\007\ufff2\011\ufff2\031\ufff2" +
    "\033\ufff2\001\002\000\014\006\ufff3\007\ufff3\011\ufff3\031" +
    "\ufff3\033\ufff3\001\002\000\006\011\070\031\067\001\002" +
    "\000\014\006\uffef\007\uffef\011\uffef\031\uffef\033\uffef\001" +
    "\002\000\014\006\ufffc\007\ufffc\011\ufffc\031\ufffc\033\ufffc" +
    "\001\002\000\014\006\ufff1\007\ufff1\011\ufff1\031\ufff1\033" +
    "\ufff1\001\002\000\014\006\ufff0\007\ufff0\011\ufff0\031\ufff0" +
    "\033\ufff0\001\002\000\014\006\uffee\007\uffee\011\uffee\031" +
    "\uffee\033\uffee\001\002\000\014\006\uffed\007\uffed\011\uffed" +
    "\031\uffed\033\uffed\001\002\000\020\003\066\004\010\010" +
    "\023\012\005\013\013\014\014\035\015\001\002\000\012" +
    "\003\035\014\014\015\030\025\037\001\002\000\016\002" +
    "\uffea\006\uffea\007\uffea\011\uffea\031\uffea\033\uffea\001\002" +
    "\000\014\006\ufffd\007\ufffd\011\ufffd\031\ufffd\033\ufffd\001" +
    "\002\000\022\003\020\004\010\010\023\012\005\013\013" +
    "\014\014\032\007\035\015\001\002\000\006\002\uffff\031" +
    "\uffff\001\002\000\004\015\076\001\002\000\016\002\uffcf" +
    "\006\uffcf\007\uffcf\011\uffcf\031\uffcf\033\uffcf\001\002\000" +
    "\012\003\035\014\014\015\030\025\037\001\002\000\014" +
    "\003\035\014\014\015\030\025\037\026\102\001\002\000" +
    "\006\026\105\034\104\001\002\000\044\002\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\011\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\026\uffd7\030\uffd7\031\uffd7" +
    "\033\uffd7\034\uffd7\001\002\000\012\021\044\022\045\026" +
    "\uffd0\034\uffd0\001\002\000\012\003\035\014\014\015\030" +
    "\025\037\001\002\000\044\002\uffd8\005\uffd8\006\uffd8\007" +
    "\uffd8\011\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\026\uffd8\030\uffd8\031\uffd8\033\uffd8\034" +
    "\uffd8\001\002\000\012\021\044\022\045\026\uffd1\034\uffd1" +
    "\001\002\000\010\021\044\022\045\030\110\001\002\000" +
    "\044\002\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\026" +
    "\uffd9\030\uffd9\031\uffd9\033\uffd9\034\uffd9\001\002\000\016" +
    "\002\uffe7\006\uffe7\007\uffe7\011\uffe7\031\uffe7\033\uffe7\001" +
    "\002\000\004\002\000\001\002\000\004\005\114\001\002" +
    "\000\020\003\066\004\010\010\023\012\005\013\013\014" +
    "\014\035\015\001\002\000\010\006\116\007\117\031\067" +
    "\001\002\000\020\003\066\004\010\010\023\012\005\013" +
    "\013\014\014\035\015\001\002\000\016\002\uffec\006\uffec" +
    "\007\uffec\011\uffec\031\uffec\033\uffec\001\002\000\006\007" +
    "\121\031\067\001\002\000\016\002\uffeb\006\uffeb\007\uffeb" +
    "\011\uffeb\031\uffeb\033\uffeb\001\002\000\004\025\123\001" +
    "\002\000\006\014\124\026\126\001\002\000\006\026\uffd2" +
    "\034\uffd2\001\002\000\006\026\134\034\133\001\002\000" +
    "\020\003\066\004\010\010\023\012\005\013\013\014\014" +
    "\035\015\001\002\000\006\031\067\033\130\001\002\000" +
    "\004\014\014\001\002\000\004\007\132\001\002\000\006" +
    "\002\uffd4\031\uffd4\001\002\000\004\014\141\001\002\000" +
    "\020\003\066\004\010\010\023\012\005\013\013\014\014" +
    "\035\015\001\002\000\006\031\067\033\136\001\002\000" +
    "\004\014\014\001\002\000\004\007\140\001\002\000\006" +
    "\002\uffd5\031\uffd5\001\002\000\006\026\uffd3\034\uffd3\001" +
    "\002\000\016\002\uffe8\006\uffe8\007\uffe8\011\uffe8\031\uffe8" +
    "\033\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\030\002\011\003\015\004\024\007\020\010" +
    "\003\011\023\012\005\013\021\020\025\021\010\024\016" +
    "\001\001\000\002\001\001\000\004\020\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\112\015\035" +
    "\016\030\017\033\020\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\110\015\035\016\030\017\033" +
    "\020\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\057\006\061\007" +
    "\056\010\055\011\062\012\063\013\060\020\025\024\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\031\015\035\016\030\017\033\020\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\014\037\015\035\016\030\017" +
    "\033\020\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\054\016\030\017\033\020\032\001\001\000" +
    "\012\015\053\016\030\017\033\020\032\001\001\000\010" +
    "\016\052\017\033\020\032\001\001\000\010\016\045\017" +
    "\033\020\032\001\001\000\002\001\001\000\006\017\051" +
    "\020\032\001\001\000\006\017\050\020\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\071\007\056\010\055\011\062" +
    "\012\063\013\060\020\025\024\064\001\001\000\014\014" +
    "\070\015\035\016\030\017\033\020\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\073\007\020\010" +
    "\003\011\023\012\005\013\021\020\025\021\010\024\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\106\016\030\017\033\020\032\001\001" +
    "\000\014\015\102\016\030\017\033\020\032\022\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\105\016\030\017\033\020\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\114\006\061\007\056\010\055\011\062" +
    "\012\063\013\060\020\025\024\064\001\001\000\002\001" +
    "\001\000\024\005\117\006\061\007\056\010\055\011\062" +
    "\012\063\013\060\020\025\024\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\126\006\061\007\056\010\055\011\062" +
    "\012\063\013\060\020\025\024\064\001\001\000\002\001" +
    "\001\000\004\020\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\134\006\061\007" +
    "\056\010\055\011\062\012\063\013\060\020\025\024\064" +
    "\001\001\000\002\001\001\000\004\020\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
public static void main(String args[]) throws Exception {
        SymbolFactory sf = new DefaultSymbolFactory();
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String fileIn, fileOut;

        parser parser_obj = null;
        if (args.length<1){
            System.out.println("*** Advertencia: Archivo fuente no especificado.");
            System.out.print("Por favor, especifique un archivo a compilar: ");
            fileIn = br.readLine();
            fileOut = fileIn.substring(0, fileIn.lastIndexOf(".")) + ".pcod";
        }else{
            fileIn = args[0];
            if(args.length<2){
              fileOut = fileIn.substring(0, fileIn.lastIndexOf(".")) + ".pcod";
            }else{
              fileOut = args[1];
            }
        }
        parser_obj=new parser(new Scanner(new java.io.FileInputStream(fileIn),sf),sf);
        parser_obj.parse();
        NodoBase root=parser_obj.action_obj.getASTroot();
        System.out.println();
        System.out.println("IMPRESION DEL AST GENERADO");
        System.out.println();
        //ast.Util.imprimirAST(root);
        TablaSimbolos ts = new TablaSimbolos();
        try{
          ts.cargarTabla(root, 0);
        }catch(IdNotFoundException e){
          System.err.println("\n\nSe ha encontrado un error en la compilacion:\n\t" + e.getMessage());
          System.exit(0);
        }
        ts.ImprimirTabla();
        Tiny.Generador.setTablaSimbolos(ts);
        Tiny.Generador.generarCodigoObjeto(root, fileIn, fileOut);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    private boolean debug=true;
    private NodoBase ast=null;
    private int lineanum=0;
    private int contBloque = 0;

    //Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
    public NodoBase getASTroot(){
        return ast;
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // decl_vect ::= VECTOR ID NUM 
            {
              NodoBase RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 15a");
                                        if (id != null && num != null){
                                         NodoVector vector = new NodoVector(new NodoIdentificador(id.toString()),new NodoValor(Integer.parseInt(num)));
                                        vector.setDeclaracion(true);
                                        System.out.println("Devuelve un nodo vector");
                                        RESULT = vector;
                                        }else{
                                            RESULT = null;
                                            System.out.println("Ocurrio error en cup # 00017");
                                        }
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_vect",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arg_list ::= simple_exp 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase variable = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 18b");
                                        RESULT=variable;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arg_list ::= arg_list COMMA simple_exp 
            {
              NodoBase RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ar = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase variable = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 18a");
                                                        NodoBase hijoActual = ar;
                                                        if(hijoActual !=null){
                                                            while(hijoActual.TieneHermano()){
                                                                hijoActual = hijoActual.getHermanoDerecha();
                                                            }
                                                            hijoActual.setHermanoDerecha(variable);
                                                            RESULT=ar;
                                                        }else{
                                                            RESULT=variable;
                                                        }
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // param_list ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 17b");
                                if(variable!=null){
                                    System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
                                    RESULT= new NodoArgumento(new NodoIdentificador(variable.toString()));
                                }else{
                                    RESULT = null;
                                    System.out.println("Ocurrio error en cup # 0005");
                                }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // param_list ::= param_list COMMA ID 
            {
              NodoBase RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ar = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 17a");
                                                        NodoBase hijoActual = ar;
                                                        if(hijoActual !=null){
                                                            while(hijoActual.TieneHermano()){
                                                                hijoActual = hijoActual.getHermanoDerecha();
                                                            }
                                                            hijoActual.setHermanoDerecha(new NodoArgumento(new NodoIdentificador(variable.toString())));
                                                            RESULT=ar;
                                                        }else{
                                                            RESULT=new NodoArgumento(new NodoIdentificador(variable.toString()));
                                                        }
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // function_stmt ::= FUNCTION ID LPAREN RPAREN s_stmt_seq RETURN iden END 
            {
              NodoBase RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase st = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase variable = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  if(debug) System.out.println("\t regla 16b");
                                                                                            RESULT = new NodoFuncion(new NodoIdentificador(id.toString()),null,st,variable,++contBloque);
                                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_stmt ::= FUNCTION ID LPAREN param_list RPAREN s_stmt_seq RETURN iden END 
            {
              NodoBase RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ar = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase st = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase variable = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  if(debug) System.out.println("\t regla 16a");
                                                                                                            RESULT = new NodoFuncion(new NodoIdentificador(id.toString()),ar,st,variable,++contBloque);
                                                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // iden ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    if(debug) System.out.println("\t regla 15d");
                            if(variable!=null){
                                System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
                                RESULT= new NodoIdentificador(variable.toString());
                            }else{
                                RESULT = null;
                                System.out.println("Ocurrio error en cup # 0005");
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iden",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // iden ::= ID LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  if(debug) System.out.println("\t regla 15c anidada");
                                    RESULT = new NodoFuncion(new NodoIdentificador(id.toString()));
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iden",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // iden ::= ID LPAREN arg_list RPAREN 
            {
              NodoBase RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ar = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  if(debug) System.out.println("\t regla 15b anidada");
                                                RESULT = new NodoFuncion(new NodoIdentificador(id.toString()),ar);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iden",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // iden ::= ID LBRACK simple_exp RBRACK 
            {
              NodoBase RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  if(debug) System.out.println("\t regla 15a");
                                                if (id != null && ex != null)
                                                    RESULT = new NodoVector(new NodoIdentificador(id.toString()),ex);
                                                else{
                                                    RESULT = null;
                                                    System.out.println("Ocurrio error en cup # 0005");
                                                }
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iden",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // factor ::= error 
            {
              NodoBase RESULT =null;
		 if(debug) System.out.println("\t regla 14d");
                    System.out.println("Ocurrio error en cup # 0003");
                    RESULT=null;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= iden 
            {
              NodoBase RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase id = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 14c");
                            RESULT = id;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 14b");
                        System.out.println("Devolví un nodo número entero");
                        RESULT= new NodoValor(Integer.parseInt(valor));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  if(debug) System.out.println("\t regla 14a");
                                    RESULT = ex;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // term ::= factor 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 13c");
                        RESULT=ex;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 13b");
                                        RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 13a");
                                        RESULT = new NodoOperacion(exI,tipoOp.por,exD);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 12c");
                            RESULT=ex;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 12b");
                                                RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 12a");
                                                RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= simple_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 11c");
                            RESULT = ex;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= simple_exp EQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 11b");
                                                RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 11a");
                                                RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // write_stmt ::= WRITE exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 10");
                                RESULT= new NodoEscribir(ex);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // read_stmt ::= READ iden 
            {
              NodoBase RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase id = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 9");
                                System.out.println("Leyendo Variable");
                                if(id!=null)
                                    RESULT = new NodoLeer(id);
                                else{
                                    RESULT = null;
                                    System.out.println("Ocurrio error en cup # 0002");
                                }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assign_stmt ::= iden ASSIGN exp 
            {
              NodoBase RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase id = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase r = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 8");
                                            if(id!=null)
                                                RESULT = new NodoAsignacion(id,r);
                                            else{
                                                RESULT = null;
                                                System.out.println("Ocurrio error en cup # 0001");
                                            }
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // repeat_stmt ::= REPEAT s_stmt_seq UNTIL exp 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 7");
                                                                RESULT = new NodoRepeat(cuerpo,prueba);
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // if_stmt ::= IF exp THEN s_stmt_seq ELSE s_stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  if(debug) System.out.println("\t regla 6b");
                                                                        RESULT = new NodoIf(ex,pthen,pelse);
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // if_stmt ::= IF exp THEN s_stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  if(debug) System.out.println("\t regla 6a");
                                                    RESULT = new NodoIf(ex,pthen);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // s_stmt ::= error 
            {
              NodoBase RESULT =null;
		  if(debug) System.out.println("\t regla 5f");
                    System.out.println("Ocurrio error en cup # 0004");
                    RESULT=null;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // s_stmt ::= decl_vect 
            {
              NodoBase RESULT =null;
		int develeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deveright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase deve = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 4h");
                            RESULT=deve;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // s_stmt ::= write_stmt 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 5e");
                                RESULT=sesc;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // s_stmt ::= read_stmt 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 5d");
                                RESULT=slec;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // s_stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 5c");
                                RESULT=sasi;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // s_stmt ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 5b");
                                RESULT=srep;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // s_stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 5a");
                            RESULT=sif;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= error 
            {
              NodoBase RESULT =null;
		  if(debug) System.out.println("\t regla 4g");
                    System.out.println("Ocurrio error en cup # 0004");
                    RESULT=null;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= decl_vect 
            {
              NodoBase RESULT =null;
		int develeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deveright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase deve = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 4h");
                            RESULT=deve;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= function_stmt 
            {
              NodoBase RESULT =null;
		int fntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fnt = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 4f");
                                RESULT=fnt;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= write_stmt 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 4e");
                                RESULT=sesc;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= read_stmt 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 4d");
                                RESULT=slec;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 4c");
                                RESULT=sasi;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 4b");
                                RESULT=srep;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 4a");
                            RESULT=sif;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s_stmt_seq ::= s_stmt 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 3b");
                                RESULT=sent;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s_stmt_seq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s_stmt_seq ::= s_stmt_seq SEMI s_stmt 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 3a");
                                                    NodoBase hijoActual = ini;
                                                    if(hijoActual !=null){
                                                        while(hijoActual.TieneHermano()){
                                                            hijoActual = hijoActual.getHermanoDerecha();
                                                        }
                                                        hijoActual.setHermanoDerecha(sent);
                                                        RESULT=ini;
                                                    }else{
                                                        RESULT=sent;
                                                    }
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s_stmt_seq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt_seq ::= stmt 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 2b");
                            RESULT=sent;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt_seq ::= stmt_seq SEMI stmt 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 2a");
                                                NodoBase hijoActual = ini;
                                                if(hijoActual !=null){
                                                    while(hijoActual.TieneHermano()){
                                                        hijoActual = hijoActual.getHermanoDerecha();
                                                    }
                                                    hijoActual.setHermanoDerecha(sent);
                                                    RESULT=ini;
                                                }else{
                                                    RESULT=sent;
                                                }
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmt_seq 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 1");
                            ast = s;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

